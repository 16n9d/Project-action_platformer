<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Player Object
hspd   = 0.0;
vspd   = 0.0;
mspd   = 4.0;
jspd   = 7.0;
grav   = 0.3;
dir    = -1.0;
state  = " ";
dmg    = 2.0;
hdam   = 20.0;
hp     = 20.0;
def    = 0.0;
weight = 0.0;

hp_max    = 20.0;
hdam_max  = 20.0;
hp_goal   = 20.0;
hdam_goal = 20.0;
max_grav  = 10.0;
dmg_sum   = 0.0;
movement  = true;
landed    = true;

invencible = false;

gamepad_set_axis_deadzone(0, 0.7);

// Initialize Instaces
cam   = instance_create(x, y, sys_camera);
wep   = instance_create(x, y, obj_sword);
shl   = instance_create(x, y, obj_shield);

x_off = 40;
y_off = 30; 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Not invencible
invencible = false;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Drifting
hspd = 0;
state = "idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage image_blend
image_blend = c_white;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if a variable has changed
if (sprite_index != old_sprite) {
    image_index = 0;
}

if (vspd == 0 &amp;&amp; landed = false) {
    landed = true;
    audio_emitter_pitch(mainAudio, random_range(1.10, 1.35));
    audio_play_sound_on(mainAudio, snd_footstep, false, 1);
} else if (vspd != 0) {
    landed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check variables
old_sprite = sprite_index;
old_dir    = dir;
old_health = hp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controll the player
// Get Keyboard input
/////////////////////////
// React to the inputs //
//  Move Horizontally  //
/////////////////////////

move = key_left + key_right;

// Smoothly move horizontally
if (move != 0 &amp;&amp; movement) {
    if (bet(hspd, -mspd, mspd)) {
        hspd += ((mspd * 0.15) - weight) * move;
    } else {
        hspd += (((move * mspd) - weight) - hspd) * 0.15;
    }
} else {
    hspd += (0 - hspd) * 0.1;
}

////////////////
// Jump Event //
////////////////

// Check for ground
if (place_meeting(x, y + 1, par_solid)) {
    // Jump event
    if (key_jump &amp;&amp; movement) {
        vspd = -jspd;
        repeat(2) instance_create(x, y - 6, part_rock);
        
        audio_emitter_pitch(mainAudio, random_range(1.10, 1.35));
        audio_play_sound_on(mainAudio, snd_footstep, false, 1);
    }
} else {
    // Add gravity
    if (vspd &lt; max_grav) {
        vspd += grav;
    }
}

// Variable jumping
if (vspd &lt; 0 &amp;&amp; (!key_jumph) &amp;&amp; state != "damage") {
    vspd = max(vspd, -jspd / 2);
}

/////////////////////////////////
// Step on dangerous platforms //
/////////////////////////////////

if (place_meeting(x, y + 1, par_damage)) {
    state = "damage";   
    effect_init(SCREENSHAKE, 16, 4, 45);     
    
    if (!alarm[0]) {
        image_blend = make_colour_rgb(181, 23, 23);
        alarm[0] = 6;
    }
    
    repeat(irandom_range(8, 16)) {
        instance_create(x, y - sprite_height / 2, part_blood);
    }

    vspd = -jspd * 0.75;

    entity_hp_mod(id, -3);
    
    audio_emitter_pitch(mainAudio, random_range(0.80, 1.20));
    audio_play_sound_on(mainAudio, snd_hit, false, 1);
    audio_play_sound_on(mainAudio, snd_hurt, false, 1);
}


var n = instance_nearest(x, y, part_smoke);

if (distance_to_object(n) &lt; 3 &amp;&amp; n.image_index &lt; 4) {
    entity_hp_mod(id, -(2 - round(distance_to_object(n) / 2)) + def);

    if (!audio_is_playing(snd_hit) &amp;&amp; !audio_is_playing(snd_hurt)) {
        audio_emitter_pitch(mainAudio, random_range(0.80, 1.20));
        audio_play_sound_on(mainAudio, snd_hit, false, 1);
        audio_play_sound_on(mainAudio, snd_hurt, false, 1);
    }
    
    effect_init(SCREENSHAKE, 16, 10, 45);  
}

/////////////////////////
// Controll the health //
/////////////////////////

// Perform the death event if hp gets to 0
if (hp &lt;= 0.9) {
    hp = 0;
    repeat(40) instance_create(x, y - sprite_height / 2, part_blood);
    instance_destroy();
    game_restart();
}

// Set a max limit to the health
if (hp &gt; hp_max) hp = hp_max;

////////////
// Attack //
////////////
if (key_att &amp;&amp; movement) {
    if (!instance_exists(obj_slash)) {
        var l = instance_create(x + (x_off * dir), y - sprite_height / 2, obj_slash);
            l.image_xscale = dir;
            l.dmg = dmg;
        effect_init(SCREENSHAKE, 4, 2, 5);
    }
}

// Getting damaged
var inst = instance_place(x, y, par_enemy);

if (place_meeting(x, y, inst) &amp;&amp; !invencible) {
    // Receive damage
    entity_hp_mod(id, -inst.dmg + def);
    
    audio_emitter_pitch(mainAudio, random_range(0.80, 1.20));
    audio_play_sound_on(mainAudio, snd_hit, false, 1);
    audio_play_sound_on(mainAudio, snd_hurt, false, 1);
    
    if (!alarm[0]) {
        image_blend = make_colour_rgb(181, 23, 23);
        alarm[0] = 6;
    }
    
    effect_init(SCREENSHAKE, 16, 4, 90);  
    repeat(irandom_range(8, 16)) instance_create(x, y - sprite_height / 2, part_blood);
    // Get Invencible for a second
    if (!alarm[2]) {
        invencible = true;
        alarm[2] = room_speed;
        image_alpha = 0.65;
    }
}

////////////////
// Collisions //
////////////////

// Horizontal Collisions
if (place_meeting(x + hspd, y, par_solid)) {
    while (!place_meeting(x + sign(hspd), y, par_solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

x += round(hspd);

// Vertical Collisions
if (place_meeting(x , y + vspd, par_solid)) {
    while (!place_meeting(x, y + sign(vspd), par_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

y += vspd;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controll the sprite system
// Sprite basics
if (hspd &lt; 0) dir = -1;
if (hspd &gt; 0) dir =  1;

// Check if the player is on the ground
if (place_meeting(x, y + 1, par_solid)) {
    // Change the sprite accorting to the hspd
    if (bet(hspd, -0.50, 0.50)) {
        // Change the sprite to idle
        sprite_index = spr_player_idle;
        image_speed  = 0.15;
        
        state = "idle";
    } else {
        // Change the sprite to run
        sprite_index = spr_player_run;
        image_speed  = 0.15 + (abs(hspd) * 0.05);
        
        state = "run";
        
        if (bet(image_index, 4, 5) || bet(image_index, 10, 11)) {
            if (!audio_is_playing(snd_footstep)) {
                audio_emitter_pitch(mainAudio, random_range(0.90, 1.10));
                audio_play_sound_on(mainAudio, snd_footstep, false, 1);
            }
        }
    }
} else {
    // Then the player is jumping or falling
    sprite_index = spr_player_jump;
    image_index  = y &gt; yprevious;
}

image_xscale = dir;


if (keyboard_check_pressed(vk_escape)) game_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controll instances
// Get the weapon to follow the player
var xx, yy;
    xx = x + (x_off * -dir);
    yy = y - y_off;

/// Manage the sword object **********************************************
if (!instance_exists(obj_slash)) {
    wep.image_alpha = 1;
    
    wep.x += ( xx - wep.x ) * 0.1;
    wep.y += ( yy - wep.y ) * 0.1;
    wep.image_angle += ((xx - wep.x) - wep.image_angle) * 0.5;
} else {
    wep.image_alpha = 0;  

    wep.x += ( (x + ((x_off * 0.90) * dir)) - wep.x ) * 0.5;
    wep.y += ( (y - 18) - wep.y ) * 0.5;
    wep.image_angle += sign(wep.image_angle) * 16;
}
wep.image_angle = median(-135, wep.image_angle, 135);

/// Manage the Shield Object *********************************************
if (!key_shield) {
    shl.depth = depth + 1;
    shl.x += (x + (8 * dir) - shl.x) * 0.75;
    shl.y += ( y - 12 - shl.y ) * 0.5;
    shl.sprite_index = spr_offshield;
    
    // Set perks to default values
    def  = 0.0;
    mspd = 4 - (shl.weight * 0.25);
} else {
    shl.depth = depth - 1;
    shl.x += (x + (12 * dir) - shl.x) * 0.5;
    shl.y += ( y - 12 - shl.y ) * 0.5;
    shl.sprite_index = spr_shield;
    
    // Transfer shield perks to the player variables
    def  = shl.def;
    mspd = 4 - shl.weight;
}
shl.image_xscale = dir;

/// Controll the camera object ********************************************
cam.x += ( (x + (x_off * dir)) - cam.x ) * 0.1;
cam.y += ( yy - cam.y ) * 0.1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the healthbars
draw_self();

draw_sprite(spr_container, 0, x, ( y - sprite_height * 1.5 ) + 2);
draw_sprite_part(spr_health, 1, 0, 0, (sprite_get_width(spr_health) * hdam) / hdam_max, sprite_get_height(spr_health), x - 24 , y - sprite_height * 1.5);
draw_sprite_part(spr_health, 0, 0, 0, (sprite_get_width(spr_health) * hp) / hp_max, sprite_get_height(spr_health), x - 24, y - sprite_height * 1.5);

draw_set_font(fnt_game);
if (dmg_sum &gt; 0) draw_text_colour(x - 22, y - sprite_height * 2.0, dmg_sum, c_white, c_white, c_white, c_white, 1);

hp += (hp_goal - hp) * 0.15;

if (hp - hp_goal &lt;= 0.005) {
    hdam += (hdam_goal - hdam) * 0.25;
}

if (hp - hp_goal &lt;= 0) {
    dmg_sum = 0;
}

// Set variable limits
if (hp_goal &lt; 0) hp_goal = 0;
if (hdam_goal &lt; 0) hdam_goal = 0;
if (hp_goal &gt; hp_max) hp_goal = hp_max;
if (hdam_goal &gt; hp_max) hdam_goal = hp_max;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
