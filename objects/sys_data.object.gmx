<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mask_system</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-3005</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize global variables
random_set_seed(randomize());
global.gold  = 0;
global.level = 1;
global.gamepad = false;

globalvar inv, mainAudio;

for (i = 0 ; i &lt; 3 ; i++) {
    inv[i, 1] = noone;
    inv[i, 2] = 0;     
    inv[i, 0] = " " + string(inv[i, 2]);
}

mainAudio = audio_emitter_create();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_alt)) global.gamepad = true;

globalvar key_left,      key_right,      key_jump,      key_jumph,      key_att,      key_prima,
          key_second,    key_drop,       key_next,      key_prev,       item_use,     key_shield, 
          key_down,      key_act,       key_act_press,  key_act_rel;
          
          
    key_left       = -(keyboard_check(vk_left)                    ||    gamepad_axis_value(0, gp_axislh) &lt; 0);
    key_right      =   keyboard_check(vk_right)                   ||    gamepad_axis_value(0, gp_axislh) &gt; 0;
    key_down       =   keyboard_check(vk_down)                    ||    gamepad_axis_value(0, gp_axislv) &gt; 0; 
    key_jumph      =   keyboard_check(vk_up)                      ||    gamepad_button_check(0, gp_face1);
    key_jump       =   keyboard_check_pressed(vk_up)              ||    gamepad_button_check_pressed(0, gp_face1);
    key_att        =   keyboard_check_pressed(vk_space)           ||    gamepad_button_check_pressed(0, gp_face2);
    
    key_next       =   keyboard_check_pressed(ord('C'))           ||    gamepad_button_check_pressed(0, gp_shoulderr);
    key_prev       =   keyboard_check_pressed(ord('V'))           ||    gamepad_button_check_pressed(0, gp_shoulderl);
    
    item_use       =   keyboard_check_pressed(ord('Z'))           ||    gamepad_button_check_pressed(0, gp_shoulderrb);
    key_shield     =   keyboard_check(ord('X'))                   ||    gamepad_button_check(0, gp_shoulderlb);
    
    key_drop       =   gamepad_button_check_pressed(0, gp_face3);
    key_act        =   gamepad_button_check_pressed(0, gp_face3)  ||    keyboard_check_pressed(ord('A'));
    key_act_rel    =   gamepad_button_check_released(0, gp_face3) ||    keyboard_check_released(ord('A'));
    key_act_press  =   gamepad_button_check(0, gp_face3)          ||    keyboard_check(ord('A'));

if (global.gamepad) {
    key_prima      =   gamepad_button_check_pressed(0, gp_face1);
    key_second     =     gamepad_button_check_pressed(0, gp_face2);
} else {
    key_prima      =   mouse_check_button_pressed(mb_left);
    key_second     =   mouse_check_button_pressed(mb_right);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_player)) {
    with(obj_player) light = scr_ls_light_create(x, y, 64, c_white, 0.25, id);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_free(mainAudio);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
