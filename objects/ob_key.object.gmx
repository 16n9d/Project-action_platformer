<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_key</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize particle
hups = irandom(2) + 1;
jspd = random_range(-1, -3);
mspd = random_range(-2, 2);
vspd = jspd;
hspd = 0.0;
grav = 0.3;
used = false;

image_speed = 0.50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle logic
// Make the particle bounce on the ground
if (place_meeting(x, y + 1, par_solid)) {
    // Check if it is able to hup
    if (hups &gt; 0) {
        jspd -= (jspd * 0.25);
        vspd = jspd; 
        hups--;
    } else {
        vspd = 0;
    }
    // Slow down the motion speed
    mspd += (0 - mspd) * 0.05;
} else {
    // Add gravity
    if (vspd &lt; 7) {
        vspd += grav;
    }
}


if (place_meeting(x, y, obj_player)) {
    used = true;
}    

if (!used) {
    // Stop the particle of moving horizontally if collision with a solid
    if (place_meeting(x + hspd, y, par_solid)) {
        mspd = 0;
    }
    
    hspd = mspd;
    
    // Particle built in cfg
    x += round(hspd);
    
    // Vertical Collisions
    if (place_meeting(x , y + vspd, par_solid)) {
        while (!place_meeting(x, y + sign(vspd), par_solid)) {
            y += sign(vspd);
        }
        vspd = 0;
    }
    
    y += round(vspd);
} else {
    x += ((view_xview + 12) - x) * 0.3;
    y += ((view_yview + 18) - y) * 0.3;
    if (x - (view_xview + 12) &lt; 1 &amp;&amp; y - (view_yview + 18) &lt; 24) {
        if (image_alpha &gt; 0.25) {
            image_alpha += (0 - image_alpha) * 1;
        } else {
            instance_destroy();
            global.gold += (irandom_range(1, 3));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
